

Full Docker Build including app
docker compose build
docker compose up -d
docker compose up kafka-topics-init
// tear down..... docker compose down

//If you need to rebuild just one service after code changes:
docker compose up -d --build auth-service
docker compose up -d --build order-service
docker compose up -d --build loyalty-service
docker compose up -d --build customer-service
docker compose up -d --build product-service
docker compose ps confirms all services  are running.


patterns...to create topics

docker compose exec kafka kafka-topics.sh --create --topic payment.completed --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1
docker compose exec kafka kafka-topics.sh --create --topic payment.failed --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1
docker compose exec kafka kafka-topics.sh --create --topic order.completed --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1

You???re in the repo root, but the Cargo workspace is under services/. Use one of these:

Option B: Use the workspace manifest path from root


**Local build to docker only
cargo run --manifest-path services/Cargo.toml -p product-service
cargo run --manifest-path services/Cargo.toml -p analytics-service
cargo run --manifest-path services/Cargo.toml -p integration-gateway
cargo run --manifest-path services/Cargo.toml -p order-service
cargo run --manifest-path services/Cargo.toml -p auth-service
cargo run --manifest-path services/Cargo.toml -p payment-service
cargo run --manifest-path services/Cargo.toml -p loyalty-service
cargo run --manifest-path services/Cargo.toml -p customer-service



List containers on novapos_novanet:
docker network inspect novapos_novanet
→ check the Containers block to see which services are connected.


Now that you know which containers sit on novapos_novanet, grab their service names/IDs from the Containers block and stream each one’s logs.

Tail a single container (replace with the ID or name you copied, e.g. novapos-order-service-1):
docker logs -f --tail 200 novapos-order-service-1

If you prefer the compose aliases (you’re in C:\Projects\novapos):
docker compose logs -f order-service
docker compose logs -f payment-service …etc.

Need everything at once?
docker compose logs -f

docker compose logs -f order-service
docker compose logs -f integration-gateway
docker compose logs -f payment-service



See the services (health endpoints)

product: curl http://localhost:8081/healthz
analytics: curl http://localhost:8082/healthz
gateway: curl http://localhost:8083/healthz
order: curl http://localhost:8084/healthz
auth: curl http://localhost:8085/healthz
payment: curl http://localhost:8086/healthz
loyalty: curl http://localhost:8088/healthz
customer: curl http://localhost:8089/healthz
PowerShell alt: irm http://localhost:8081/healthz



Quick Start

Makefile task: run .\Makefile.ps1 Dev-Frontend -App pos-app from the repo root.
Alt (if policy blocks scripts): powershell -ExecutionPolicy Bypass -File .\Makefile.ps1 Dev-Frontend -App pos-app
Open: http://localhost:5173
Stop: press Ctrl+C in the terminal running the dev server.
Manual Start

Go to app: cd frontends/pos-app
Install deps: npm install
Run Vite: npm run dev

C:\Projects\novapos\frontends\admin-portal> npm run dev
 C:\Projects\novapos\frontends\pos-app> npm run dev


**********************************postgres in docker*********************************************************
PS C:\Projects\novapos> docker run --name novapos-pg -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres:16

PS C:\Projects\novapos> docker exec -it novapos-pg psql -U postgres -c "CREATE DATABASE novapos;"
 

If you want to stay connected, open psql against the default postgres database and kill the stragglers manually:
psql postgres://novapos:novapos@localhost:5432/postgres

then inside psql run:
SELECT pg_terminate_backend(pid)
FROM pg_stat_activity
WHERE datname = 'novapos'
  AND pid <> pg_backend_pid();
That terminates every session using novapos. E



Use this same URL for product-service, order-service, auth-service, and inventory-service in the prototype:

# For current shell session:
$env:DATABASE_URL = "postgres://novapos:novapos@localhost:5432/novapos"


# Make it persistent for future shells and on this 
setx DATABASE_URL "postgres://novapos:novapos@localhost:5432/novapos

sqlx database drop -y -D 'postgres://novapos:novapos@localhost:5432/novapos'
sqlx database create -D 'postgres://novapos:novapos@localhost:5432/novapos'
powershell -ExecutionPolicy Bypass -File .\migrate-all.ps1

***************MANUAL Drop and Recreate DATABASE
PS C:\Projects\novapos> psql -U novapos -d novapos -h localhost -p 5432
Password for user novapos: 

psql (16.10)
WARNING: Console code page (437) differs from Windows code page (1252)
         8-bit characters might not work correctly. See psql reference
         page "Notes for Windows users" for details.
Type "help" for help.

novapos=# DROP DATABASE IF EXISTS novapos;
ERROR:  cannot drop the currently open database
novapos=# \c postgres
You are now connected to database "postgres" as user "novapos".
postgres=# DROP DATABASE IF EXISTS novapos;
DROP DATABASE
postgres=# CREATE DATABASE novapos OWNER novapos;
CREATE DATABASE


cd services\product-service
sqlx database create     # safe to re-run
sqlx migrate run --ignore-missing

cd ..\order-service
sqlx migrate run --ignore-missing

cd ..\auth-service
sqlx migrate run --ignore-missing

cd ..\inventory-service
sqlx migrate run --ignore-missing

cd ..\customer-service
sqlx migrate run --ignore-missing

cd ..\loyalty-service
sqlx migrate run --ignore-missing

cd ..\analytics-service
sqlx migrate run --ignore-missing

cd ..\integration-gateway
sqlx migrate run --ignore-missing

cd ..\payment-service
sqlx migrate run --ignore-missing




Yes, if you use the setx command, the environment variable will be set persistently for your user account. It will remain available in all new PowerShell or Command Prompt sessions???even after restarting your computer or server.

However, note:

It will not be available in already-open shells; you must open a new shell to see the change.
It is set for your user, not system-wide (unless you use /M for machine-wide).

*******************************************************************************************

Default POS credentials (from auth-service migration 3002)
Email: admin@novapos.local
Password: admin123
Role: super_admin (tenant NovaPOS HQ)

Tenant & Key Management Updates (Sept 2025)
------------------------------------------
- After pulling latest changes run auth-service migrations 3003/3004 (e.g. sqlx migrate run) to create the integration_keys table and role constraint.
- integration-gateway now expects DATABASE_URL (same Postgres DSN as other services) and optionally KEY_REFRESH_SECONDS (default 60). Remove any tenant_config.json usage.
- Generate/rotate integration keys via POST /tenants/{tenant_id}/integration-keys (or Admin UI > Settings); broadcast new key to external systems and revoke unused ones.
- Admin portal linting now uses eslint.config.js (flat config). Run npm run lint once to ensure the new config is picked up.

Set CUSTOMER_MASTER_KEY before running customer-service (base64-encoded 32-byte key).
Example: $env:CUSTOMER_MASTER_KEY = "wJr6c+g4vF5n3fH0wIr1Vj0pND+1tQgxOcnANLmJHzk="
Seed tenant data keys (from repo root):
cargo run --manifest-path services/Cargo.toml -p customer-service --bin seed_tenant_keys -- --tenant <TENANT_UUID>
Add --rotate to force a new version when one already exists.
Apply customer-service migrations (ensure DATABASE_URL points to target env):
sqlx migrate run --source services/customer-service/migrations --ignore-missing

Backfill customer PII columns (defaults batch=100):
cargo run --manifest-path services/Cargo.toml -p customer-service --bin backfill_customer_pii -- --tenant <TENANT_UUID>
Add --dry-run to report counts without updating rows.
